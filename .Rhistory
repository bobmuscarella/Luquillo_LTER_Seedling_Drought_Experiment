me_growth_gt[[i]] <- brm(grow_tol | resp_se(grow_tol_se, sigma = TRUE) ~
me(grow_avg, grow_se),
data = xx,
family = gaussian())
me_growth_gt
me_growth_gt
# Average Growth and Growth sensitivity / tolerance
xx$grow_avg <- avg_grow
xx$grow_se <- se_grow
me_growth_gt <- brm(grow_tol | resp_se(grow_tol_se, sigma = TRUE) ~
me(grow_avg, grow_se),
data = xx,
family = gaussian())
me_growth_gt
# Average Growth and Growth sensitivity / tolerance
xx$grow_avg <- avg_grow
xx$grow_se <- se_grow
trts
trt_me_growavg <- list()
i=1
xx[paste0(trts[i], "_med")] <- tapply(pctraits[,trts[i]], pctraits$Species, median)
xx[paste0(trts[i], "_se")] <- tapply(pctraits[,trts[i]], pctraits$Species, se)
xx$x_med <- xx[paste0(trts[i], "_med")][,1]
xx$x_se <- xx[paste0(trts[i], "_se")][,1]
xx$x_med
paste0(trts[i], "_med")
xx$x_med <- xx[paste0(trts[i], "_med")][,1]
xx$x_se <- xx[paste0(trts[i], "_se")][,1]
# Average Growth and Growth sensitivity / tolerance
xx$grow_avg <- avg_grow
xx$grow_se <- se_grow
# Average growth x traits
trt_me_growavg[[i]] <- brm(grow_avg | resp_se(grow_se, sigma = TRUE) ~
me(x_med, x_se),
data = xx,
family = gaussian())
trt_me_growavg
trt_me_growavg <- list()
for(i in seq_along(trts)){
xx[paste0(trts[i], "_med")] <- tapply(pctraits[,trts[i]], pctraits$Species, median)
xx[paste0(trts[i], "_se")] <- tapply(pctraits[,trts[i]], pctraits$Species, se)
xx$x_med <- xx[paste0(trts[i], "_med")][,1]
xx$x_se <- xx[paste0(trts[i], "_se")][,1]
# Average Growth and Growth sensitivity / tolerance
xx$grow_avg <- avg_grow
xx$grow_se <- se_grow
# Average growth x traits
trt_me_growavg[[i]] <- brm(grow_avg | resp_se(grow_se, sigma = TRUE) ~
me(x_med, x_se),
data = xx,
family = gaussian())
}
### MODELS OF CORRELATIONS BETWEEN DEMOGRAPHIC METRICS AND INDIVIDUAL TRAITS
trts <- c("logLeafArea",
"logLMA",
"logLeafThicknessMean",
"LDMC",
"logRSratio",
"logSRL",
"logRTD",
"logRootLength",
"logRootAvgDiam",
"logRootDepth",
"logRootTips")
trt_me_growavg <- list()
trt_me_st <- list()
trt_me_ss <- list()
trt_me_gt <- list()
trt_me_gs <- list()
### REGENERATE TABLE S9 WITH MEASUREMENT ERROR MODELS
trt_me_growavg <- c(trt_me_growavg, fit_indiv_me_avggrow_rc1, fit_indiv_me_avggrow_rc2)
fit_indiv_me_gs_rc2
# Average growth x RC1
fit_indiv_me_avggrow_rc1 <- brm(grow_avg | resp_se(grow_se, sigma = TRUE) ~
me(rc1_med, rc1_se),
data = xx,
family = gaussian())
# Average growth x RC2
fit_indiv_me_avggrow_rc2 <- brm(grow_avg | resp_se(grow_se, sigma = TRUE) ~
me(rc2_med, rc2_se),
data = xx,
family = gaussian())
names(trt_me_growavg)
fit_indiv_me_avggrow_rc2
### MODELS OF CORRELATIONS BETWEEN DEMOGRAPHIC METRICS AND INDIVIDUAL TRAITS
trts <- c("logLeafArea",
"logLMA",
"logLeafThicknessMean",
"LDMC",
"logRSratio",
"logSRL",
"logRTD",
"logRootLength",
"logRootAvgDiam",
"logRootDepth",
"logRootTips")
trt_me_growavg <- list()
trt_me_st <- list()
trt_me_ss <- list()
trt_me_gt <- list()
trt_me_gs <- list()
for(i in seq_along(trts)){
xx[paste0(trts[i], "_med")] <- tapply(pctraits[,trts[i]], pctraits$Species, median)
xx[paste0(trts[i], "_se")] <- tapply(pctraits[,trts[i]], pctraits$Species, se)
xx$x_med <- xx[paste0(trts[i], "_med")][,1]
xx$x_se <- xx[paste0(trts[i], "_se")][,1]
# Average growth x traits
trt_me_growavg[[i]] <- brm(grow_avg | resp_se(grow_se, sigma = TRUE) ~
me(x_med, x_se),
data = xx,
family = gaussian())
# Survival tolerance x traits
trt_me_st[[i]] <- brm(surv_tol | resp_se(surv_tol_se, sigma = TRUE) ~
me(x_med, x_se),
data = xx,
family = gaussian())
# Survival sensitivity x traits
trt_me_ss[[i]] <- brm(surv_sens | resp_se(surv_sens_se, sigma = TRUE) ~
me(x_med, x_se),
data = xx,
family = gaussian())
# Growth tolerance x traits
trt_me_gt[[i]] <- brm(grow_tol | resp_se(grow_tol_se, sigma = TRUE) ~
me(x_med, x_se),
data = xx,
family = gaussian())
# Growth sensitivity x traits
trt_me_gs[[i]] <- brm(grow_sens | resp_se(grow_sens_se, sigma = TRUE) ~
me(x_med, x_se),
data = xx,
family = gaussian())
names(trt_me_growavg)[i] <- trts[i]
names(trt_me_st)[i] <- trts[i]
names(trt_me_ss)[i] <- trts[i]
names(trt_me_gt)[i] <- trts[i]
names(trt_me_gs)[i] <- trts[i]
}
### REGENERATE TABLE S9 WITH MEASUREMENT ERROR MODELS
trt_me_growavg <- c(trt_me_growavg, fit_indiv_me_avggrow_rc1, fit_indiv_me_avggrow_rc2)
trt_me_ss <- c(trt_me_ss, list(fit_indiv_me_ss_rc1, fit_indiv_me_ss_rc2))
trt_me_st <- c(trt_me_st, list(fit_indiv_me_st_rc1, fit_indiv_me_st_rc2))
trt_me_gs <- c(trt_me_gs, list(fit_indiv_me_gs_rc1, fit_indiv_me_gs_rc2))
trt_me_gt <- c(trt_me_gt, list(fit_indiv_me_gt_rc1, fit_indiv_me_gt_rc2))
names(trt_me_growavg)[12:13] <- c("RC1", "RC2")
names(trt_me_st)[12:13] <- c("RC1", "RC2")
names(trt_me_ss)[12:13] <- c("RC1", "RC2")
names(trt_me_gt)[12:13] <- c("RC1", "RC2")
names(trt_me_gs)[12:13] <- c("RC1", "RC2")
tab <- matrix(nrow=13, ncol=5)
for(i in 1:13){
for(m in 1:5){
modlist <- list(trt_me_growavg, trt_me_st, trt_me_ss, trt_me_gt, trt_me_gs)[[m]]
sig <- sign(fixef(modlist[[i]])[2,3]) == sign(fixef(modlist[[i]])[2,4])
tab[i,m] <- paste0(
round(fixef(modlist[[i]])[2,1], 2),
" [",
round(fixef(modlist[[i]])[2,3], 2),
", ",
round(fixef(modlist[[i]])[2,4], 2),
"]",
ifelse(sig, "*", ""))
}
}
i
m
tab[i,m] <- paste0(
round(fixef(modlist[[i]])[2,1], 2),
" [",
round(fixef(modlist[[i]])[2,3], 2),
", ",
round(fixef(modlist[[i]])[2,4], 2),
"]",
ifelse(sig, "*", ""))
modlist[[12]]
modlist[12]
fit_indiv_me_avggrow_rc1
fit_indiv_me_avggrow_rc1
fit_indiv_me_ss_rc2
c(trt_me_growavg, fit_indiv_me_avggrow_rc1, fit_indiv_me_avggrow_rc2)
trt_me_growavg
fit_indiv_me_avggrow_rc1
### REGENERATE TABLE S9 WITH MEASUREMENT ERROR MODELS
trt_me_growavg <- list(trt_me_growavg, fit_indiv_me_avggrow_rc1, fit_indiv_me_avggrow_rc2)
trt_me_growavg
fit_indiv_me_avggrow_rc1
fit_indiv_me_avggrow_rc2
trt_me_growavg <- list()
for(i in seq_along(trts)){
xx[paste0(trts[i], "_med")] <- tapply(pctraits[,trts[i]], pctraits$Species, median)
xx[paste0(trts[i], "_se")] <- tapply(pctraits[,trts[i]], pctraits$Species, se)
xx$x_med <- xx[paste0(trts[i], "_med")][,1]
xx$x_se <- xx[paste0(trts[i], "_se")][,1]
# Average growth x traits
trt_me_growavg[[i]] <- brm(grow_avg | resp_se(grow_se, sigma = TRUE) ~
me(x_med, x_se),
data = xx,
family = gaussian())
# Survival tolerance x traits
# trt_me_st[[i]] <- brm(surv_tol | resp_se(surv_tol_se, sigma = TRUE) ~
#                             me(x_med, x_se),
#                           data = xx,
#                           family = gaussian())
#
# # Survival sensitivity x traits
# trt_me_ss[[i]] <- brm(surv_sens | resp_se(surv_sens_se, sigma = TRUE) ~
#                             me(x_med, x_se),
#                           data = xx,
#                           family = gaussian())
#
# # Growth tolerance x traits
# trt_me_gt[[i]] <- brm(grow_tol | resp_se(grow_tol_se, sigma = TRUE) ~
#                             me(x_med, x_se),
#                           data = xx,
#                           family = gaussian())
#
# # Growth sensitivity x traits
# trt_me_gs[[i]] <- brm(grow_sens | resp_se(grow_sens_se, sigma = TRUE) ~
#                             me(x_med, x_se),
#                           data = xx,
#                           family = gaussian())
names(trt_me_growavg)[i] <- trts[i]
# names(trt_me_st)[i] <- trts[i]
# names(trt_me_ss)[i] <- trts[i]
# names(trt_me_gt)[i] <- trts[i]
# names(trt_me_gs)[i] <- trts[i]
}
# Average survival x RC1
fit_indiv_me_avgsurv_rc1 <- brm(surv_avg ~
me(rc1_med, rc1_se),
data = xx,
family = gaussian())
# Average surv x traits
xx$surv_avg <- avg_surv
# Average survival x RC1
fit_indiv_me_avgsurv_rc1 <- brm(surv_avg ~
me(rc1_med, rc1_se),
data = xx,
family = gaussian())
fit_indiv_me_avgsurv_rc1
plot(xx$rc1_med, xx$surv_avg)
# Average survival x RC2
fit_indiv_me_avgsurv_rc2 <- brm(surv_avg ~
me(rc2_med, rc2_se),
data = xx,
family = gaussian())
fit_indiv_me_avgsurv_rc2
plot(xx$rc2_med, xx$surv_avg)
trt_me_survavg <- list()
trt_me_survavg <- list()
trt_me_growavg
trt_me_survavg
for(i in seq_along(trts)){
xx[paste0(trts[i], "_med")] <- tapply(pctraits[,trts[i]], pctraits$Species, median)
xx[paste0(trts[i], "_se")] <- tapply(pctraits[,trts[i]], pctraits$Species, se)
xx$x_med <- xx[paste0(trts[i], "_med")][,1]
xx$x_se <- xx[paste0(trts[i], "_se")][,1]
# Average survival x traits
trt_me_survavg[[i]] <- brm(surv_avg ~
me(x_med, x_se),
data = xx,
family = gaussian())
names(trt_me_survavg)[i] <- trts[i]
}
trt_me_survavg
trt_me_growavg
trt_me_st
names(trt_me_survavg)[i]
names(trt_me_growavg)
names(trt_me_st)
trt_me_growavg
names(trt_me_growavg)
xx
fit_indiv_me_avggrow_rc1
fit_indiv_me_avgsurv_rc2
length(trt_me_survavg)
length(trt_me_growavg)
### REGENERATE TABLE S9 WITH MEASUREMENT ERROR MODELS
trt_me_survavg <- c(trt_me_survavg, list(fit_indiv_me_avgsurv_rc1, fit_indiv_me_avgsurv_rc2))
trt_me_growavg <- c(trt_me_growavg, list(fit_indiv_me_avggrow_rc1, fit_indiv_me_avggrow_rc2))
names(trt_me_survavg)[12:13] <- c("RC1", "RC2")
names(trt_me_growavg)[12:13] <- c("RC1", "RC2")
trt_me_growavg
names(trt_me_growavg)
names(trt_me_survavg)
names(trt_me_st)
tab <- matrix(nrow=13, ncol=5)
for(i in 1:13){
for(m in 1:5){
modlist <- list(trt_me_growavg, trt_me_st, trt_me_ss, trt_me_gt, trt_me_gs)[[m]]
sig <- sign(fixef(modlist[[i]])[2,3]) == sign(fixef(modlist[[i]])[2,4])
tab[i,m] <- paste0(
round(fixef(modlist[[i]])[2,1], 2),
" [",
round(fixef(modlist[[i]])[2,3], 2),
", ",
round(fixef(modlist[[i]])[2,4], 2),
"]",
ifelse(sig, "*", ""))
}
}
tab <- matrix(nrow=13, ncol=6)
for(i in 1:13){
for(m in 1:6){
modlist <- list(trt_me_survavg, trt_me_growavg, trt_me_st, trt_me_ss, trt_me_gt, trt_me_gs)[[m]]
sig <- sign(fixef(modlist[[i]])[2,3]) == sign(fixef(modlist[[i]])[2,4])
tab[i,m] <- paste0(
round(fixef(modlist[[i]])[2,1], 2),
" [",
round(fixef(modlist[[i]])[2,3], 2),
", ",
round(fixef(modlist[[i]])[2,4], 2),
"]",
ifelse(sig, "*", ""))
}
}
rownames(tab) <- c(logfoctraits[c(5:15)], "RC1", "RC2")
colnames(tab) <- c("Average survival",
"Average growth",
"Survival tolerance",
"Survival sensitivity",
"Growth tolerance",
"Growth sensitivity")
tab
write.csv(tab, file="Tables/TableS9_demographic-traits-correlations_20240112.csv")
knitr::opts_chunk$set(echo = TRUE)
#read the Selenium dataset
# Selenium <- read.table("C:\\Users\\sibo0003\\Stat2\\Selenium.txt", header = TRUE)
Selenium <- read.table("/Users/au529793/Downloads/rhelpcleaning/Selenium.txt", header = TRUE)
Selenium
Selenium
# Perform ANOVA
anova_result <- aov(Se ~ Subject, data = Selenium)
# Print ANOVA table
print(summary(anova_result))
# Specify treatment as factors
Selenium$Subject <- as.factor(Selenium$Subject)
Selenium$Time <- as.factor(Selenium$Time)
str(Selenium)
# Perform Tukey's HSD test
tukey_result <- TukeyHSD(aov(Se ~ Subject, data = Selenium))
# Confidence interval for the difference between the second and fourth subject
confidence_interval <- tukey_result$`Subject`[, "diff"][2] - tukey_result$`Subject`[, "diff"][4]
cat("Tukey-Adjusted 95% Confidence Interval:", confidence_interval, "\n")
# Specify treatment as factors
Selenium$Subject <- as.factor(Selenium$Subject)
Selenium$Time <- as.factor(Selenium$Time)
str(Selenium)
# Compute plot means
plot.means <- aggregate(Se ~ factor(Subject) + Time, data = Selenium, FUN= mean)
# Fit a random-effects model
model<-lmer(Se ~ 1 + (1|Subject), data = Selenium, REML = TRUE)
# Print model summary
summary(model)
# Perform ANOVA
anova_result <- aov(Se ~ Subject, data = Selenium)
# Print ANOVA table
print(summary(anova_result))
# Perform ANOVA
anova(model)
# Print ANOVA table
print("anova")
# Perform ANOVA
anova(model)
model
anova(model)
# Print model summary
summary(model)
### BOB: THESE LAST TWO LINES DON'T REALLY DO ANYTHING?
# Perform ANOVA
anova(model)
# Print ANOVA table
print("anova")
# Read the PigletGlucose dataset
# glucose <- read.table("C:\\Users\\sibo0003\\Stat2\\PigletsGlucose.txt", header = TRUE)
glucose <- read.table("/Users/au529793/Downloads/rhelpcleaning/PigletsGlucose.txt", header = TRUE)
# Make factors
glucose$Sow <- as.factor(glucose$Sow)
glucose$Diet <- as.factor(glucose$Diet)
glucose$Piglet <- as.factor(glucose$Piglet)
# Fixed Effect
library(sasLM)
aov3(Glucose ~ Diet + Diet:Sow, Data = glucose)
#Random effects
library(car)
options(contrasts = c("contr.sum", "contr.poly"))
model.mixed <- lmer(Glucose ~ Diet + (1 | Diet:Sow), data = glucose)
Anova(model.mixed, type = "III", test.statistic = "F", ddf = "Kenward-Roger")
#loading the libraries needed
library(car)
library(sasLM)
library(emmeans)
#read the Bulkdensity dataset
# density <- read.table("C:\\Users\\sibo0003\\Stat2\\Bulkdensity.txt", header = TRUE)
density <- read.table("/Users/au529793/Downloads/rhelpcleaning/Bulkdensity.txt", header = TRUE)
#read the Bulkdensity dataset
# density <- read.table("C:\\Users\\sibo0003\\Stat2\\Bulkdensity.txt", header = TRUE)
density <- read.table("/Users/au529793/Downloads/rhelpcleaning/Bulkdensity (1).txt", header = TRUE)
density$Claycontent
density$Bulkdensity
### A test if covariate is related to the treatments
# model <- lm(Bulkdensity ~ Claycontent * Treatment + Block, data = density)
model<- lm(Claycontent~Treatment, data = density)
anova(model)
options(contrasts = c("contr.sum", "contr.poly"))
model.1 <- lm(Bulkdensity ~ Treatment + Claycontent, data = density)
Anova(model.1, type = "III" )
options(contrasts = c("contr.sum", "contr.poly"))
model.2 <- lm(Bulkdensity ~ Claycontent + Treatment + Treatment : Claycontent, data = density)
Anova(model.2, type = "III" )
options(contrasts = c("contr.sum", "contr.poly"))
model.2 <- lm(Bulkdensity ~ Claycontent + Treatment + Treatment : Claycontent, data = density)
Anova(model.2, type = "III" )
summary(model.2)
contr.sum (model.2)
# Controlla il grafico???
interaction.plot(x.factor= density$Claycontent,trace.factor= density$Treatment, response=density$Bulkdensity, fun=median, col=1:4)
# Controlla il grafico???
interaction.plot(x.factor = density$Claycontent,
trace.factor = density$Treatment,
response=density$Bulkdensity,
fun=median, col=1:4)
emmeans(model.2, pairwise ~ Treatment, at = list(Claycontent = 0.15) )
# Read the river data
# river <- read.table("C:\\Users\\sibo0003\\Stat2\\Riverdata.txt", header = TRUE)
river <- read.table("/Users/au529793/Downloads/rhelpcleaning/Riverdata.txt", header = TRUE)
river$Site <- as.factor(river$Site)
# options(contrasts = c("contr.sum", "contr.poly"))
summary(river)
model <- lm(pH ~ Site, data = river)
Site.anova <- anova(model)
# (A) standard error of the means SE=0.0337
emmeans(model, ~ Site)
# (B) standard error of the difference SE=0.0476
emmeans(model, pairwise ~ Site)
emmeans(model, pairwise ~ Site, adjust="none")
diffs <- emmeans(model, pairwise ~ Site)
confint(diffs)
moist_summary
######
names(xx)
# Survival tolerance vs. survival sensitivity
fit_me_st_ss <- brm(surv_tol | resp_se(surv_tol_se, sigma = TRUE) ~
me(surv_sens, surv_sens_se),
data = xx,
family = gaussian())
fit_me_st_ss
plot(surv_tol, surv_sens)
fit_me_st_ss
abline(0.5, -0.31)
# Growth tolerance vs. growth sensitivity
fit_me_gt_gs <- brm(grow_tol | resp_se(grow_tol_se, sigma = TRUE) ~
# Growth tolerance vs. growth sensitivity
fit_me_gt_gs <- brm(grow_tol | resp_se(grow_tol_se, sigma = TRUE) ~
me(grow_sens, grow_sens_se),
data = xx,
family = gaussian())
fit_me_gt_gs
plot(grow_tol, grow_sens)
abline(0.04, -0.39)
plot(grow_sens, grow_tol)
abline(0.04, -0.39)
fit_me_st_ss
plot(surv_sens, surv_tol)
abline(0.04, -0.39)
abline(0.5, -0.31)
plot(surv_sens, surv_tol)
abline(0.5, -0.31)
plot(grow_sens, grow_tol)
abline(0.04, -0.39)
fit_me_ss_gs
fit_me_st_gt <- brm(surv_tol | resp_se(surv_tol_se, sigma = TRUE) ~
me(grow_tol, grow_tol_se),
data = xx,
family = gaussian())
fit_me_st_gt
# Survival sensitivity vs. growth sensitivity
fit_me_ss_gs <- brm(surv_sens | resp_se(surv_sens_se, sigma = TRUE) ~
me(grow_sens, grow_sens_se),
data = xx,
family = gaussian())
fit_me_ss_gs
plot(surv_tol, grow_tol)
abline(0.41, -4.71)
plot(grow_tol, surv_tol)
abline(0.41, -4.71)
fit_me_ss_gs
fit_me_ss_gs
plot(grow_sens, surv_sens)
abline(0.28, 0.1)
fit_me_st_ss
plot(surv_sens, surv_tol)
abline(0.5, -0.31)
# Growth tolerance vs. growth sensitivity
fit_me_gt_gs <- brm(grow_tol | resp_se(grow_tol_se, sigma = TRUE) ~
me(grow_sens, grow_sens_se),
data = xx,
family = gaussian())
fit_me_st_ss
fit_me_gt_gs
fit_me_st_gt
fit_me_ss_gs
head(xx)
# Average survival vs. average growth
fit_me_as_ag <- brm(surv_avg  ~
me(grow_avg, grow_se),
data = xx,
family = gaussian())
fit_me_as_ag
plot(surv_avg, grow_avg)
plot(xx$surv_avg, xx$grow_avg)
cor(xx$surv_avg, xx$grow_avg)
cor.test(xx$surv_avg, xx$grow_avg)
